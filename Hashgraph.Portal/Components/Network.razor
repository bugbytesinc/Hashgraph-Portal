<section class="network-results-display">
    <ul>
        <li @onclick="@(()=>ShowTab=RESULTS_TAB)" class="@(ShowTab == RESULTS_TAB ? "active" : "")">Results</li>
        <li @onclick="@(()=>ShowTab=LOG_TAB)" class="@(ShowTab == LOG_TAB ? "active" : "")">Log</li>
        <li @onclick="@(()=>ShowTab=TXID_TAB)" class="@(ShowTab == TXID_TAB ? "active" : "")">Tx</li>
        <li @onclick="@(()=>ShowTab=ERRORS_TAB)" class="@(ShowTab == ERRORS_TAB ? "active" : "")">Errors</li>
    </ul>
    @switch (ShowTab)
    {
        case RESULTS_TAB:
            <div class="network-results-tab results">@ChildContent</div>
            break;
        case LOG_TAB:
            var logEntries = _logEntries.ToArray();
            <div class="network-results-tab logs">
                @if (logEntries.Length == 0)
                {
                    <div>No Network Activity.</div>
                }
                else
                {
                    foreach (var item in _logEntries)
                    {
                        switch (item.Type)
                        {
                            case Models.NetworkActivityEventType.SendingRequest:
                                <div class="sending">Sending @item.Timestamp</div>
                                <div class="request">@item.Data?.ToString()</div>
                                break;
                            case Models.NetworkActivityEventType.ResponseReceived:
                                if (item.TryNo == 0)
                                {
                                    <div class="received">Received @item.Timestamp</div>
                                }
                                else
                                {
                                    <div class="received">Received (Try @item.TryNo )@item.Timestamp</div>
                                }
                                <div class="response">@item.Data?.ToString()</div>
                                break;
                            case Models.NetworkActivityEventType.WaitingForSignature:
                                <div class="waiting">Waiting for Signatures @item.Timestamp</div>
                                <div class="transaction">@item.Data?.ToString()</div>
                                break;
                            default:
                                <div class="timestamp">@item.Timestamp</div>
                                <div class="data">@item.Data?.ToString()</div>
                                break;
                        }
                    }
                }
            </div>
            break;
        case TXID_TAB:
            var txIds = _transactionIds.ToArray();
            <div class="network-results-tab txid">
                @if (txIds.Length == 0)
                {
                    <div>No Transactions Created.</div>
                }
                else
                {
                    @foreach (var txid in txIds)
                    {
                        <h3>@Hashgraph.Portal.Services.Util.ToDate(txid).ToString("dddd, dd MMMM yyyy HH:mm:ss.fffffff") by <AddressDisplay Address="txid.Address" /></h3>
                        @if (_isMainNetwork)
                        {
                            <ul>
                                <li><a href="@($"https://app.dragonglass.me/hedera/transactions/{txid.Address.ShardNum}{txid.Address.RealmNum}{txid.Address.AccountNum}{txid.ValidStartSeconds}{txid.ValidStartNanos}")" target="_blank">app.dragonglass.me</a></li>
                                <li><a href="@($"https://www.hasharc.com/tx/{txid.Address.ShardNum}.{txid.Address.RealmNum}.{txid.Address.AccountNum}-{txid.ValidStartSeconds}-{txid.ValidStartNanos}")" target="_blank">www.hasharc.com</a></li>
                                <li><a href="@($"https://explorer.kabuto.sh/search?q={txid.Address.ShardNum}.{txid.Address.RealmNum}.{txid.Address.AccountNum}@{txid.ValidStartSeconds}.{txid.ValidStartNanos}")" target="_blank">explorer.kabuto.sh</a></li>
                            </ul>
                        }
                        else
                        {
                            <ul>
                                <li><a href="@($"https://testnet.dragonglass.me/hedera/transactions/{txid.Address.ShardNum}{txid.Address.RealmNum}{txid.Address.AccountNum}{txid.ValidStartSeconds}{txid.ValidStartNanos}")" target="_blank">testnet.dragonglass.me</a></li>
                            </ul>
                        }
                    }
                }
            </div>
            break;
        case ERRORS_TAB:
            var inputErrors = GetValidationErrors();
            var networkErrors = _errors.ToArray();
            <div class="network-results-tab errors">
                @if (inputErrors.Length == 0 && networkErrors.Length == 0)
                {
                    <div>No Errors Reported.</div>
                }
                @if (inputErrors.Length > 0)
                {
                    <h3>Input Validation Errors</h3>
                    <ul>
                        @foreach (var message in inputErrors)
                        {
                            <li>@message</li>
                        }
                    </ul>
                }
                @if (networkErrors.Length > 0)
                {
                    foreach (var item in networkErrors)
                    {
                        switch (item)
                        {
                            case PrecheckException pex:
                                <h3>Transaction was rejected by the Network</h3>
                                <div>Code: @pex.Status</div>
                                break;
                            case TransactionException tex:
                                <h3>Transaction was accepted by the Network but Failed</h3>
                                <div>Message: @tex.Message</div>
                                <div>Code: @tex.Status</div>
                                break;
                            case ConsensusException cex:
                                <h3>The Network Failed to reach Consensus</h3>
                                <div>Message: @cex.Message</div>
                                <div>Code: @cex.Status</div>
                                break;
                            case OperationCanceledException ocex:
                                <h3>Canceled</h3>
                                <div>Transaction Canceled by User.</div>
                                break;
                            case Exception ex:
                                <h3>An error occurred while processing the request</h3>
                                <div>Message: @ex.Message</div>
                                break;
                            default:
                                <h3>An error occurred while processing the request</h3>
                                <div>@item.ToString()</div>
                                break;
                        }
                    }
                }
            </div>
            break;
    }
</section>
<SignTransactionDialog @ref="_signTransactionDialog" />