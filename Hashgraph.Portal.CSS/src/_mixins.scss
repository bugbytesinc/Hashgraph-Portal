// Scales in viewport width to a certain fraction
@function vw-length($length, $container-length) {
    @return ($length/$container-length)*100vw;
}

// Scales in viewport height to a certain fraction
@function vh-length($length, $container-length) {
    @return ($length/$container-length)*100vh;
}

// Scales in minum of viewport width or height to a certain fraction
@function vmin-length($length, $container-length) {
    @return ($length/$container-length)*100vmin;
}

// Casts LOGICAL Pixels into pages' corresponding REMs
$logical-pixel-to-rem-factor: ((100%/$base-font-size)/16)*1rem;
@function px($length) {
    @return $length*$logical-pixel-to-rem-factor;
}

// Casts LOGICAL Pixels into pages' corresponding EMs
// Used for media queries insted due to safari bug with REMs
// also note EMs on the HTML element default to 16px (usually)
// so the $base-font-size does not enter the equation.
$logical-pixel-to-em-factor: 0.0625em;

@function pxem($length) {
    @return $length*$logical-pixel-to-em-factor;
}

// Establish a block element the same
// aspect ratio as the background that
// it is intended to contain.
@mixin size-to-background-by-width($background-image, $height-to-width-aspect, $width) {
    display: block;
    box-sizing: border-box;
    width: $width;
    height: $width * $height-to-width-aspect;
    background-repeat: no-repeat;
    background-size: contain;
    background-position: center;
    background-image: $background-image;
}

// Helper function to encode URL to make it parseable inline
// https://codepen.io/kevinweber/pen/dXWoRw
$encoding-reference: ( ('<', '%3C'), ('>', '%3E'), ('"', '\''), ('#', '%23'), ('&', '%26'));
// Thanks to Hugo Giraudel for his str-replace function (http://www.sassmeister.com/gist/1b4f2da5527830088e4d)
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}

@function url-encode($string) {
    @each $char,
    $encoded in $encoding-reference {
        $string: str-replace($string, $char, $encoded);
    }
    @return $string;
}

// Create Embedded Background image from SVG Path
@mixin svg-background($args) {
    $params: map-merge(( viewbox: 0 0 1 1, path: "M0 0 L 0 1 L 1 1 L 1 0 Z", stroke: transparent, fill: white, ), $args);
    $stroke: map-get($params, stroke);
    $fill: map-get($params, fill);
    $viewbox: map-get($params, viewbox);
    $path: map-get($params, path);
    $svg: "<svg xmlns='http://www.w3.org/2000/svg' viewBox='#{$viewbox}' fill='#{$fill}' stroke='#{$stroke}'><path d='#{$path}'/></svg>";
    $url: "data:image/svg+xml;charset=UTF-8,#{url-encode($svg)}";
    background-image: url("#{$url}");
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
}

// Create Icon from SVG Path
@mixin svg-icon($args) {
    $params: map-merge(( width: 1em, height: 1em, fill: $glyph-foreground, fill-hover: $glyph-hover, stroke-hover: transparent, ), $args);
    display: inline-block;
    width: map-get($params, width);
    height: map-get($params, height);
    @include svg-background($params);
}

// Create Button from SVG Path.
@mixin svg-button($args) {
    $params: map-merge(( width: 1em, height: 1em, fill: $glyph-foreground, fill-hover: $glyph-hover, stroke-hover: transparent, ), $args);
    @include svg-icon($params);
    cursor: pointer;
    &:hover {
        @include svg-background(map-merge($params, ( fill: map-get($params, fill-hover), stroke: map-get($params, stroke-hover))));
    }
}

// Scales in viewport width to a certain fraction
@mixin vw-font-size($min-size, $max-size, $max-container) {
    $min-container: $max-container * $min-size / $max-size;
    font-size: px($max-size);    
    @media screen and (max-width: pxem($max-container)) {
        font-size: vw-length($max-size, $max-container);
    }
    @media screen and (max-width: pxem($min-container)) {
        font-size: px($min-size);
    }
}
